name: CI-CD Pipeline - Lea MLOps App (branche léa_work)

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REPO_NAME: lea_mlops_app

# =========================================
# Déclenchement de la pipeline
# =========================================
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# =========================================
# Les jobs : CI puis CD
# =========================================
jobs:

  # ---------------------------
  # CI : Vérifications et tests
  # ---------------------------
  ci_pipeline:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Cloner le dépôt GitHub
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Étape 2 : Installer Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Étape 4 : Vérification du code (Black & Pylint)
      - name: Code format check (Black)
        run: |
          pip install black
          black --check app/app.py

      - name: Lint (Pylint)
        run: |
          pip install pylint
          pylint --disable=R,C,E0401,W0718 app/app.py

      # Étape 5 : Lancer les tests unitaires
      - name: Run tests
        run: |
          pip install pytest
          pip install joblib
          pip install pandas
          pip install scikit-learn
          python -m pytest -vv test.py


  # ---------------------------
  # CD : Build et Push Docker
  # ---------------------------
  cd_pipeline:
    runs-on: ubuntu-latest
    needs: [ci_pipeline]   # Le CD ne démarre que si le CI réussit

    steps:
      # Étape 1 : Checkout du code
      - uses: actions/checkout@v3

      # Étape 2 : Connexion à Docker Hub
      - name: Docker login
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin

      # Étape 3 : Générer un tag basé sur la date
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d--%H-%M-%S')" >> $GITHUB_OUTPUT

      # Étape 4 : Build de l’image Docker
      - name: Build Docker image
        run: |
          docker build -f app/Dockerfile -t $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }} ./app
          docker tag $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }} $DOCKER_USER/$REPO_NAME:latest

      # Étape 5 : Push de l’image sur Docker Hub
      - name: Push Docker image
        run: |
          docker push $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}
          docker push $DOCKER_USER/$REPO_NAME:latest
